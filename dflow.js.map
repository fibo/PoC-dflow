{
  "version": 3,
  "sources": ["dflow.ts"],
  "sourcesContent": ["/** https://github.com/fibo/dflow @license MIT */\nexport declare namespace Dflow {\n\t/** A Dflow.Func is a function, an async function, a generator or an async generator */\n\texport type Func = DflowFunc;\n\n\texport type Name = string;\n\n\t/** Dflow.Args is a list of argument names */\n\texport type Args = Dflow.Name[];\n\n\t/** A Dflow.Node is a base type for an executable unit: for example a function */\n\texport type Node = {\n\t\tname: Dflow.Name;\n\t\targs?: Dflow.Args;\n\t};\n\n\t/** A Dflow.Code can hold one or more lines of JavaScript code */\n\texport type Code = string | string[];\n\n\t/** A Dflow.NodeFunc is a node with some code. */\n\texport type NodeFunc = Dflow.Node & { code: Dflow.Code };\n\n\t/** A Dflow.NodeId is a node identifier */\n\texport type NodeId = string;\n\n\t/** A Dflow.Pin can be an input or an output of a node */\n\texport type Pin = Dflow.NodeId | [nodeId: Dflow.NodeId, position: number];\n\n\t/** Stringified Dflow.Pin */\n\texport type PinId = Dflow.NodeId | `${Dflow.NodeId},${number}`;\n\n\t/** A Dflow.Pipe connects from a source Dflow.Pin to a target Dflow.Pin */\n\texport type Pipe = {\n\t\tfrom: Dflow.Pin;\n\t\tto: Dflow.Pin;\n\t};\n\n\t/** A Dflow.Graph is a collection of nodes and pipes */\n\texport type Graph = {\n\t\tnodes: {\n\t\t\tid: Dflow.NodeId;\n\t\t\tname: Dflow.Name;\n\t\t}[];\n\t\tpipes: Dflow.Pipe[];\n\t};\n\n\t/** A Dflow.Outs is a list of one or more declared outputs for a node */\n\texport type Outs = Dflow.Name[];\n\n\texport type NodeGraph = Dflow.Node &\n\t\tDflow.Graph & {\n\t\t\touts?: Dflow.Outs;\n\t\t};\n\n\t/** Dflow.GraphInstances is a generic to define a Map of graph instances */\n\texport type GraphInstances<T extends Dflow> = Map<Dflow.NodeId, T>;\n}\n\ntype DflowFunc =\n\t| typeof Dflow.AsyncFunc\n\t| typeof Dflow.AsyncGeneratorFunc\n\t| typeof Dflow.Func\n\t| typeof Dflow.GeneratorFunc;\n\nexport class Dflow {\n\tname: Dflow.Name;\n\targs?: Dflow.Args;\n\touts?: Dflow.Outs;\n\n\targNodeNames = new Set<Dflow.Name>();\n\n\tfuncByName = new Map<Dflow.Name, Dflow.Func>();\n\n\t/**\n\t * A context to bound the Dflow.Func execution.\n\t *   - key: func name\n\t *   - value: context, if any\n\t */\n\tfuncContext = new Map<Dflow.Name, unknown>();\n\n\tgraphByName = new Map<Dflow.Name, Dflow.Graph>();\n\n\t/**\n\t * Graph instances.\n\t *\n\t * @example\n\t * ```ts\n\t * class MyDflow extends Dflow {\n\t *   // Override graphInstances to get the proper instance type.\n\t *   graphInstances: Dflow.GraphInstances<MyDflow> = new Map();\n\t *\n\t *   // Add a sub-graph instance of MyDflow.\n\t *   addSubGraph(graph: Dflow.NodeGraph, id = Dflow.ID()) {\n\t *     const subGraph = new MyDflow(graph);\n\t *     subGraph.inheritFuncs({\n\t *       funcByName: new Map(this.funcByName),\n\t *       funcContext: new Map(this.funcContext),\n\t *       nodeArgsByName: new Map(this.nodeArgsByName),\n\t *     });\n\t *     this.graphInstances.set(id, subGraph);\n\t *   }\n\t * }\n\t * ```\n\t */\n\tgraphInstances: Dflow.GraphInstances<Dflow> = new Map();\n\n\tnodeArgsByName = new Map<Dflow.Name, Dflow.Args>();\n\n\t/**\n\t * Node instances.\n\t *   - key node id\n\t *   - value node name\n\t *\n\t * @example\n\t * ```ts\n\t * const nodeIds = Array.from(this.node.keys())\n\t * ```\n\t *\n\t * @example\n\t * ```ts\n\t * const nodes: Dflow.Graph[\"nodes\"] = Array.from(\n\t *   this.node.entries(), ([id, name]) => ({ id, name })\n\t * )\n\t * ```\n\t */\n\tnode = new Map<Dflow.NodeId, Dflow.Name>();\n\n\t/**\n\t * Node output names.\n\t */\n\tnodeOutsByName = new Map<Dflow.Name, Dflow.Outs>();\n\n\toutNodeNames = new Set<Dflow.Name>();\n\n\t/**\n\t * Every output data.\n\t *   - key=pinId, of the related output\n\t *   - value=data\n\t *\n\t * @example\n\t * ```ts\n\t * class MyDflow extends Dflow {\n\t *   get data() {\n\t *     return Object.fromEntries(this.out.entries());\n\t *   }\n\t * }\n\t * ```\n\t */\n\tout = new Map<Dflow.PinId, unknown>();\n\n\t/**\n\t * Pipe instances.\n\t *  - key=targetId, pipe.to\n\t *  - value=sourceId, pipe.from\n\t *\n\t * @example\n\t * ```ts\n\t * const pipes: Dflow.Graph[\"pipes\"] = Array.from(\n\t *   this.pipe.entries(), ([toId, fromId]) => ({\n\t *     from: Dflow.idToPin(fromId),\n\t *     to: Dflow.idToPin(toId),\n\t *   })\n\t * )\n\t * ```\n\t */\n\tpipe = new Map<Dflow.PinId, Dflow.PinId>();\n\n\tconstructor(\n\t\t{ name, args, outs, nodes, pipes }: Dflow.NodeGraph = {\n\t\t\tname: \"\",\n\t\t\tnodes: [],\n\t\t\tpipes: [],\n\t\t}\n\t) {\n\t\tthis.name = name;\n\n\t\tif (args) for (const arg of args) this.setNode({ name: arg });\n\t\tthis.args = args;\n\n\t\tif (outs)\n\t\t\tfor (const out of outs) this.setNode({ name: out, args: [\"out\"] });\n\t\tthis.outs = outs;\n\n\t\tthis.insert({ nodes, pipes });\n\t}\n\n\t/**\n\t * A Dflow has async nodes if some of its Dflow.Func is async or if some of its sub-graphs is async.\n\t *\n\t * @example\n\t * ```ts\n\t * class MyDflow extends Dflow {\n\t *   async run () {\n\t *    // execution code\n\t *   }\n\t * }\n\t *\n\t * const graph = new MyDflow()\n\t *\n\t * if (graph.hasAsyncNodes()) {\n\t *   await graph.run()\n\t * } else {\n\t *   graph.run()\n\t * }\n\t * ```\n\t */\n\tget hasAsyncNodes() {\n\t\tconst seenNodeName = new Set();\n\t\tfor (const [nodeId, nodeName] of this.node.entries()) {\n\t\t\t// 1. Check sub-graph instances (by nodeId) first.\n\t\t\tconst graph = this.graphInstances.get(nodeId);\n\t\t\tif (graph?.hasAsyncNodes) return true;\n\n\t\t\t// Avoid double checking.\n\t\t\tif (seenNodeName.has(nodeName)) continue;\n\t\t\tseenNodeName.add(nodeName);\n\n\t\t\t// 2. Then check Dflow.Func (by nodeName).\n\t\t\tconst func = this.funcByName.get(nodeName);\n\t\t\tif (func) {\n\t\t\t\tif (\n\t\t\t\t\tDflow.isAsyncFunc(func) ||\n\t\t\t\t\tDflow.isAsyncGeneratorFunc(func)\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\taddNode(name: Dflow.Node[\"name\"], id = Dflow.ID()): Dflow.NodeId {\n\t\tthis.node.set(id, name);\n\t\treturn id;\n\t}\n\n\taddPipe(pipe: Dflow.Pipe) {\n\t\tif (this.isBrokenPipe(pipe)) throw new Dflow.Error.BrokenPipe(pipe);\n\t\tthis.pipe.set(Dflow.pinToPinId(pipe.to), Dflow.pinToPinId(pipe.from));\n\t}\n\n\tinsert({ nodes, pipes }: Dflow.Graph) {\n\t\tfor (const node of nodes) this.addNode(node.name, node.id);\n\t\tfor (const pipe of pipes) this.addPipe(pipe);\n\t}\n\n\thasNode(name: Dflow.Name) {\n\t\treturn (\n\t\t\tthis.argNodeNames.has(name) ||\n\t\t\tthis.outNodeNames.has(name) ||\n\t\t\tthis.funcByName.has(name) ||\n\t\t\tthis.graphByName.has(name)\n\t\t);\n\t}\n\n\t/**\n\t * Inherits funcs; do not override this instance args and outs.\n\t */\n\tinheritFuncs({\n\t\tfuncByName,\n\t\tfuncContext,\n\t\tnodeArgsByName,\n\t}: Pick<Dflow, \"funcByName\" | \"funcContext\" | \"nodeArgsByName\">) {\n\t\tfor (const [funcName, func] of funcByName.entries()) {\n\t\t\tif (\n\t\t\t\t(this.args ?? []).includes(funcName) ||\n\t\t\t\t(this.outs ?? []).includes(funcName)\n\t\t\t)\n\t\t\t\tcontinue;\n\t\t\tconst funcArgs = nodeArgsByName.get(funcName);\n\t\t\tif (funcArgs) {\n\t\t\t\tthis.nodeArgsByName.set(funcName, funcArgs);\n\t\t\t}\n\t\t\tconst context = funcContext.get(funcName);\n\t\t\tif (context) this.funcContext.set(funcName, context);\n\t\t\tthis.funcByName.set(funcName, func);\n\t\t}\n\t}\n\n\tisBrokenPipe(pipe: Dflow.Pipe) {\n\t\tconst [sourceId, targetId] = Dflow.nodeIdsOfPipe(pipe);\n\t\treturn !this.node.has(sourceId) || !this.node.has(targetId);\n\t}\n\n\tpipesOfSourceId(sourceId: Dflow.PinId): Dflow.Pipe[] {\n\t\tconst pipes: Dflow.Pipe[] = [];\n\t\tfor (const [toId, fromId] of this.pipe.entries())\n\t\t\tif (fromId === sourceId)\n\t\t\t\tpipes.push({\n\t\t\t\t\tfrom: Dflow.idToPin(fromId),\n\t\t\t\t\tto: Dflow.idToPin(toId),\n\t\t\t\t});\n\t\treturn pipes;\n\t}\n\n\tpipeOfTargetId(targetId: Dflow.PinId): Dflow.Pipe | undefined {\n\t\tfor (const [toId, fromId] of this.pipe.entries())\n\t\t\tif (toId === targetId)\n\t\t\t\treturn {\n\t\t\t\t\tfrom: Dflow.idToPin(fromId),\n\t\t\t\t\tto: Dflow.idToPin(toId),\n\t\t\t\t};\n\t}\n\n\tsetFunc(name: Dflow.Name, func: Dflow.Func, args?: Dflow.Args) {\n\t\tthis.setNode({ name, args });\n\t\tif (this.hasNode(name)) throw new Dflow.Error.NodeOverride(name);\n\t\tif (args) this.nodeArgsByName.set(name, args);\n\t\tthis.funcByName.set(name, func);\n\t}\n\n\tsetNode({ name, args }: Dflow.Node) {\n\t\tif (this.hasNode(name)) throw new Dflow.Error.NodeOverride(name);\n\t\tif (args) this.nodeArgsByName.set(name, args);\n\t}\n\n\tsetNodeFunc({ name, args, code }: Dflow.NodeFunc) {\n\t\tthis.setNode({ name, args });\n\t\tif (Dflow.looksLikeAsyncCode(code)) {\n\t\t\tif (args) {\n\t\t\t\tthis.setFunc(\n\t\t\t\t\tname,\n\t\t\t\t\tDflow.AsyncFunc(...args, Dflow.funcBody(code)),\n\t\t\t\t\targs\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.setFunc(name, Dflow.AsyncFunc(Dflow.funcBody(code)));\n\t\t\t}\n\t\t} else {\n\t\t\tif (args) {\n\t\t\t\tthis.setFunc(name, Dflow.Func(...args, Dflow.funcBody(code)));\n\t\t\t} else {\n\t\t\t\tthis.setFunc(name, Dflow.Func(Dflow.funcBody(code)));\n\t\t\t}\n\t\t}\n\t}\n\n\tsetNodeGraph({ name, args, outs, nodes, pipes }: Dflow.NodeGraph) {\n\t\tthis.setNode({ name, args });\n\t\tif (outs) this.nodeOutsByName.set(name, outs);\n\t\tthis.graphByName.set(name, { nodes, pipes });\n\t}\n\n\ttoJSON() {\n\t\treturn this.toValue();\n\t}\n\n\ttoValue(): Dflow.NodeGraph {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\targs: this.args,\n\t\t\touts: this.outs,\n\t\t\tnodes: Array.from(this.node.entries(), ([id, name]) => ({\n\t\t\t\tid,\n\t\t\t\tname,\n\t\t\t})),\n\t\t\tpipes: Array.from(this.pipe.entries(), ([toId, fromId]) => ({\n\t\t\t\tfrom: Dflow.idToPin(fromId),\n\t\t\t\tto: Dflow.idToPin(toId),\n\t\t\t})),\n\t\t};\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction\n\tstatic AsyncFunc = async function () {}.constructor;\n\n\tstatic Func = function () {}.constructor;\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction\n\tstatic GeneratorFunc = function* () {}.constructor;\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\n\tstatic AsyncGeneratorFunc = async function* () {}.constructor;\n\n\tstatic funcBody(arg: Dflow.Code) {\n\t\treturn typeof arg === \"string\" ? arg : arg.join(\";\");\n\t}\n\n\t/** Generate a node id */\n\tstatic ID(): Dflow.NodeId {\n\t\treturn crypto.randomUUID().substring(0, 8);\n\t}\n\n\tstatic idToPin(id: Dflow.PinId): Dflow.Pin {\n\t\tconst [nodeId, positionStr] = id.split(\",\");\n\t\tconst position = Number(positionStr);\n\t\treturn position ? [nodeId, position] : nodeId;\n\t}\n\n\t/**\n\t * The level of a node is a number that indicates its position in the graph.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const nodeIdsSortedByLevel = (\n\t *   nodeIds: Dflow.NodeId[],\n\t *   pipes: Dflow.Pipe[],\n\t * ): DflowId[] => {\n\t *   const levelOfNode: Record<Dflow.NodeId, number> = {}\n\t *   for (const nodeId of nodeIds) {\n\t *     levelOfNode[nodeId] = Dflow.levelOfNode(nodeId, pipes)\n\t *   }\n\t *   return nodeIds.slice().sort((nodeIdA, nodeIdB) =>\n\t *     (levelOfNode[nodeIdA]) <= levelOfNode[nodeIdB] ? -1 : 1\n\t *   )\n\t * }\n\t * ```\n\t */\n\tstatic levelOfNode(nodeId: Dflow.NodeId, pipes: Dflow.Pipe[]): number {\n\t\tconst parentsNodeIds = Dflow.parentNodeIds(nodeId, pipes);\n\t\t// 1. A node with no parent as level zero.\n\t\tif (parentsNodeIds.length === 0) return 0;\n\t\t// 2. Otherwise its level is the max level of its parents plus one.\n\t\tlet maxLevel = 0;\n\t\tfor (const parentNodeId of parentsNodeIds) {\n\t\t\tmaxLevel = Math.max(\n\t\t\t\tDflow.levelOfNode(parentNodeId, pipes),\n\t\t\t\tmaxLevel\n\t\t\t);\n\t\t}\n\t\t// TODO in un Directed Cyclic Graph il level \u00E8 finito\n\t\t// devo controllare se i nodeId si vedono pi\u00F9 di una volta, allora \u00E8 un ciclo\n\t\t// in quel caso ritorno level Infinity\n\t\t//\n\t\t// oppure posso anche ritornare level -1 se \u00E8 un generator, in quel caso sarebbe da gestire\n\t\treturn maxLevel + 1;\n\t}\n\n\tstatic isAsyncFunc(func: unknown) {\n\t\treturn func?.constructor === Dflow.AsyncFunc;\n\t}\n\n\tstatic isAsyncGeneratorFunc(func: unknown) {\n\t\treturn func?.constructor === Dflow.AsyncGeneratorFunc;\n\t}\n\n\tstatic isFunc(func: unknown) {\n\t\treturn func?.constructor === Dflow.Func;\n\t}\n\n\tstatic isGeneratorFunc(func: unknown) {\n\t\treturn func?.constructor === Dflow.GeneratorFunc;\n\t}\n\n\tstatic looksLikeAsyncGeneratorCode(arg: Dflow.Code) {\n\t\treturn arg.includes(\"await\") && arg.includes(\"yield\");\n\t}\n\n\tstatic looksLikeAsyncCode(arg: Dflow.Code) {\n\t\treturn arg.includes(\"await\") && !arg.includes(\"yield\");\n\t}\n\n\tstatic looksLikeGeneratorCode(arg: Dflow.Code) {\n\t\treturn !arg.includes(\"await\") && arg.includes(\"yield\");\n\t}\n\n\tstatic nodeIdOfPin(pin: Dflow.Pin): Dflow.NodeId {\n\t\treturn typeof pin === \"string\" ? pin : pin[0];\n\t}\n\n\tstatic nodeIdsOfPipe({\n\t\tfrom,\n\t\tto,\n\t}: Dflow.Pipe): [sourceNodeId: Dflow.NodeId, targetNodeId: Dflow.NodeId] {\n\t\treturn [Dflow.nodeIdOfPin(from), Dflow.nodeIdOfPin(to)];\n\t}\n\n\tstatic parentNodeIds(\n\t\tnodeId: Dflow.NodeId,\n\t\tpipes: Dflow.Pipe[]\n\t): Dflow.NodeId[] {\n\t\treturn pipes\n\t\t\t.filter(({ to }) => Dflow.nodeIdOfPin(to) === nodeId)\n\t\t\t.map(({ from }) => Dflow.nodeIdOfPin(from));\n\t}\n\n\tstatic pinToPinId(pin: Dflow.Pin): Dflow.PinId {\n\t\treturn typeof pin === \"string\"\n\t\t\t? pin\n\t\t\t: pin[1] === 0\n\t\t\t? pin[0]\n\t\t\t: pin.join();\n\t}\n\n\tstatic positionOfPin(pin: Dflow.Pin): number | undefined {\n\t\treturn typeof pin === \"string\" ? undefined : pin[1];\n\t}\n\n\tstatic Error = {\n\t\tBrokenPipe: class DflowErrorBrokenPipe extends Error {\n\t\t\tpipe: Dflow.Pipe;\n\t\t\tconstructor(pipe: Dflow.Pipe) {\n\t\t\t\tsuper(DflowErrorBrokenPipe.message(pipe));\n\t\t\t\tthis.pipe = pipe;\n\t\t\t}\n\t\t\ttoJSON() {\n\t\t\t\treturn this.toValue();\n\t\t\t}\n\t\t\ttoValue() {\n\t\t\t\treturn {\n\t\t\t\t\terrorName: \"DflowErrorBrokenPipe\",\n\t\t\t\t\tpipe: this.pipe,\n\t\t\t\t};\n\t\t\t}\n\t\t\tstatic message(pipe: Dflow.Pipe) {\n\t\t\t\treturn `Broken DflowPipe from=${pipe.from} to=${pipe.to}`;\n\t\t\t}\n\t\t},\n\n\t\tNodeExecution: class DflowErrorNodeExecution extends Error {\n\t\t\tnodeErrorMessage: Error[\"message\"];\n\t\t\tnodeId: Dflow.NodeId;\n\t\t\tnodeName: Dflow.Node[\"name\"];\n\t\t\tconstructor(\n\t\t\t\tnodeId: Dflow.NodeId,\n\t\t\t\tnodeName: Dflow.Node[\"name\"],\n\t\t\t\tnodeErrorMessage: Error[\"message\"]\n\t\t\t) {\n\t\t\t\tsuper(\n\t\t\t\t\tDflowErrorNodeExecution.message(\n\t\t\t\t\t\tnodeId,\n\t\t\t\t\t\tnodeName,\n\t\t\t\t\t\tnodeErrorMessage\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tthis.nodeId = nodeId;\n\t\t\t\tthis.nodeName = nodeName;\n\t\t\t\tthis.nodeErrorMessage = nodeErrorMessage;\n\t\t\t}\n\t\t\ttoJSON() {\n\t\t\t\treturn this.toValue();\n\t\t\t}\n\t\t\ttoValue() {\n\t\t\t\treturn {\n\t\t\t\t\terrorName: \"DflowErrorNodeExecution\",\n\t\t\t\t\tnodeId: this.nodeId,\n\t\t\t\t\tnodeName: this.nodeName,\n\t\t\t\t\tnodeErrorMessage: this.nodeErrorMessage,\n\t\t\t\t};\n\t\t\t}\n\t\t\tstatic message(\n\t\t\t\tnodeId: Dflow.NodeId,\n\t\t\t\tnodeName: Dflow.Node[\"name\"],\n\t\t\t\tnodeErrorMessage: Error[\"message\"]\n\t\t\t) {\n\t\t\t\treturn `Execution error on DflowNode name=${nodeName} id=${nodeId} error.message=${nodeErrorMessage}`;\n\t\t\t}\n\t\t},\n\n\t\tNodeOverride: class DflowErrorNodeOverride extends Error {\n\t\t\tnodeName: Dflow.Node[\"name\"];\n\t\t\tconstructor(name: Dflow.Node[\"name\"]) {\n\t\t\t\tsuper(DflowErrorNodeOverride.message(name));\n\t\t\t\tthis.nodeName = name;\n\t\t\t}\n\t\t\ttoJSON() {\n\t\t\t\treturn this.toValue();\n\t\t\t}\n\t\t\ttoValue() {\n\t\t\t\treturn {\n\t\t\t\t\terrorName: \"DflowErrorNodeOverride\",\n\t\t\t\t\tnodeName: this.nodeName,\n\t\t\t\t};\n\t\t\t}\n\t\t\tstatic message(name: Dflow.Node[\"name\"]) {\n\t\t\t\treturn `Cannot override existing DflowNode name=${name}`;\n\t\t\t}\n\t\t},\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
